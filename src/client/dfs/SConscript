"""Build FUSE client"""
import daos_build
import os.path
from os import path

def scons():
    """Execute build"""
    Import('env', 'prereqs')

    denv = env.Clone()

    """If Lustre installed use its headers to build a Lustre-aware libduns """
    try:
        import re

        gotdistro = False
        gotpkg = False
        gotversion = False
        with open('/etc/os-release') as f:
            for line in f:
                if re.search('^ID=', line):
                    line = line.strip()
                    _, distro = line.strip().split('=')
                    distro = distro.strip('"')
                    break
        if distro in ['centos', 'rhel', 'fedora', 'opensuse']:
            import rpm

            gotdistro = True
            ts = rpm.TransactionSet()
            headers = ts.dbMatch('name', 'lustre')
            if not headers:
                headers = ts.dbMatch('name', 'lustre-client')
            if headers:
                from pkg_resources import parse_version

                gotpkg = True
                for header in headers:
                    if parse_version(header['version']) >= parse_version('2.12.57'):
                        gotversion = True
        elif distro in ('debian', 'ubuntu'):
            import apt
            from pkg_resources import parse_version

            gotdistro = True
            cache = apt.Cache()
            cache.open()
            if "lustre" in cache:
                if cache["lustre"].is_installed:
                    gotpkg = True
                    instver = cache["lustre"].installed
            else:
                if "lustre-client" in cache:
                    if cache["lustre-client"].is_installed:
                        gotpkg = True
                        instver = cache["lustre-client"].installed
            if gotpkg is True:
                if parse_version(instver.version) >= parse_version('2.12.57'):
                    """ Lustre version is compatible """
                    gotversion = True
        if gotdistro is False:
            print("Unable to identify distro.")
            raise ImportError('fallback')
        else:
            if gotpkg is False:
                print("Unable to find lustre nor lustre-client package.")
                raise ImportError('fallback')
            else:
                if gotversion is False:
                    print("Installed Lustre version is not compatible.")
                else:
                    print("Installed Lustre version is compatible.")
    except ImportError as error:
        print(error.message +
              ", trying to find Lustre headers in usual locations.")
        """ Try the empirical way, by just trying to check both required header files are present ... """
        if path.exists("/usr/include/lustre/lustreapi.h"):
            if path.exists("/usr/include/linux/lustre/lustre_user.h"):
                gotpkg = True
                with open('/usr/include/linux/lustre/lustre_user.h', 'r') as file:
                    for line in file:
                        """ if definition present Lustre version is compatible """
                        if 'LU_FOREIGN_TYPE_SYMLINK' in line:
                            gotversion = True
                            break
        if gotpkg is False:
            print("Unable to find Lustre headers.")
        else:
            if gotversion is False:
                print("Installed Lustre version is not compatible.")
            else:
                print("Installed Lustre version is compatible.")
    if gotversion is True:
        print("Building with Lustre bindings.")
        denv.AppendUnique(CCFLAGS=['-DLUSTRE_INCLUDE'])
    else:
        print("Not building with Lustre bindings.")

    denv.AppendUnique(CPPDEFINES=['-DFUSE_USE_VERSION=32'])

    libraries = ['$LIBS', 'daos_common', 'daos', 'uuid']

    dfs_src = ['dfs.c']
    dfs = daos_build.library(denv, 'dfs', dfs_src, LIBS=libraries)
    denv.Install('$PREFIX/lib64/', dfs)

    libraries = libraries + ['dfs']

    denv.AppendUnique(LIBPATH=[Dir('.')])

    fenv = denv.Clone()
    prereqs.require(fenv, 'fuse')
    dfuse_hl_src = ['dfuse_hl.c']
    dfuse_hl = daos_build.program(fenv, 'dfuse_hl', dfuse_hl_src,
                                  LIBS=libraries)
    fenv.Install('$PREFIX/bin/', dfuse_hl)

    duns = daos_build.library(denv, 'duns', 'duns.c', LIBS=libraries)
    denv.Install('$PREFIX/lib64/', duns)

if __name__ == "SCons.Script":
    scons()
