"""Build spdk bindings C tests"""
import daos_build

def scons():
    """Execute build"""
    Import('senv', 'prereqs')

    senv.AppendUnique(LIBPATH=[Dir('.')])

    unit_env = senv.Clone()
    #unit_env.AppendUnique(OBJPREFIX='utest_')
    # Some syscalls are aliased when fortification is enabled, which makes
    # mocking in unit tests into a headache.
    # The compiler decides this on its own, but let's force the issue.
    #unit_env.Append(CCFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0")

    prereqs.require(unit_env, 'pmdk', 'spdk', 'hwloc', 'cmocka')

#    # Link to DPDK static libs
#    unit_env.AppendUnique(LINKFLAGS=['-Wl,--whole-archive', \
#		      '-lrte_mempool', '-lrte_mempool_ring', '-lrte_bus_pci', \
#		      '-lrte_pci', '-lrte_ring', '-lrte_mbuf', '-lrte_eal', \
#		      '-lrte_kvargs', \
#		      '-Wl,--no-whole-archive'])
#
#    # SPDK shared libs
#    libs = ['spdk_env_dpdk', 'spdk_thread', 'spdk_bdev', 'spdk_copy']
#    libs += ['spdk_bdev_aio', 'spdk_bdev_nvme', 'spdk_bdev_malloc']
#    libs += ['spdk_conf', 'spdk_blob', 'spdk_nvme', 'spdk_util']
#    libs += ['spdk_json', 'spdk_jsonrpc', 'spdk_rpc', 'spdk_trace']
#    libs += ['spdk_sock', 'spdk_log', 'spdk_notify', 'spdk_blob_bdev']
#
#    # Other libs
#    libs += ['numa']

    daos_build.test(unit_env, 'nvme_discover_tests',
                    ['nvme_discover_test.c', '../src/nvme_control_common.c',
                     '../src/nvme_control.c'],
                     LIBS=['spdk', 'spdk_env_dpdk', 'numa', 'cmocka'])

if __name__ == "SCons.Script":
    scons()
